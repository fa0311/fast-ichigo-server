/* tslint:disable */
/* eslint-disable */
/**
 * FastAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface Detection
 */
export interface Detection {
    /**
     * 
     * @type {Array<any>}
     * @memberof Detection
     */
    center: Array<any>;
    /**
     * 
     * @type {number}
     * @memberof Detection
     */
    classID: number;
    /**
     * 
     * @type {number}
     * @memberof Detection
     */
    confidence: number;
    /**
     * 
     * @type {number}
     * @memberof Detection
     */
    height: number;
    /**
     * 
     * @type {number}
     * @memberof Detection
     */
    instance: number;
    /**
     * 
     * @type {number}
     * @memberof Detection
     */
    left: number;
    /**
     * 
     * @type {Array<any>}
     * @memberof Detection
     */
    rOI: Array<any>;
    /**
     * 
     * @type {number}
     * @memberof Detection
     */
    right: number;
    /**
     * 
     * @type {number}
     * @memberof Detection
     */
    top: number;
    /**
     * 
     * @type {number}
     * @memberof Detection
     */
    trackFrames: number;
    /**
     * 
     * @type {number}
     * @memberof Detection
     */
    trackID: number;
    /**
     * 
     * @type {number}
     * @memberof Detection
     */
    trackLost: number;
    /**
     * 
     * @type {number}
     * @memberof Detection
     */
    trackStatus: number;
    /**
     * 
     * @type {number}
     * @memberof Detection
     */
    width: number;
}

/**
 * Check if a given object implements the Detection interface.
 */
export function instanceOfDetection(value: object): value is Detection {
    if (!('center' in value) || value['center'] === undefined) return false;
    if (!('classID' in value) || value['classID'] === undefined) return false;
    if (!('confidence' in value) || value['confidence'] === undefined) return false;
    if (!('height' in value) || value['height'] === undefined) return false;
    if (!('instance' in value) || value['instance'] === undefined) return false;
    if (!('left' in value) || value['left'] === undefined) return false;
    if (!('rOI' in value) || value['rOI'] === undefined) return false;
    if (!('right' in value) || value['right'] === undefined) return false;
    if (!('top' in value) || value['top'] === undefined) return false;
    if (!('trackFrames' in value) || value['trackFrames'] === undefined) return false;
    if (!('trackID' in value) || value['trackID'] === undefined) return false;
    if (!('trackLost' in value) || value['trackLost'] === undefined) return false;
    if (!('trackStatus' in value) || value['trackStatus'] === undefined) return false;
    if (!('width' in value) || value['width'] === undefined) return false;
    return true;
}

export function DetectionFromJSON(json: any): Detection {
    return DetectionFromJSONTyped(json, false);
}

export function DetectionFromJSONTyped(json: any, ignoreDiscriminator: boolean): Detection {
    if (json == null) {
        return json;
    }
    return {
        
        'center': json['Center'],
        'classID': json['ClassID'],
        'confidence': json['Confidence'],
        'height': json['Height'],
        'instance': json['Instance'],
        'left': json['Left'],
        'rOI': json['ROI'],
        'right': json['Right'],
        'top': json['Top'],
        'trackFrames': json['TrackFrames'],
        'trackID': json['TrackID'],
        'trackLost': json['TrackLost'],
        'trackStatus': json['TrackStatus'],
        'width': json['Width'],
    };
}

export function DetectionToJSON(json: any): Detection {
    return DetectionToJSONTyped(json, false);
}

export function DetectionToJSONTyped(value?: Detection | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'Center': value['center'],
        'ClassID': value['classID'],
        'Confidence': value['confidence'],
        'Height': value['height'],
        'Instance': value['instance'],
        'Left': value['left'],
        'ROI': value['rOI'],
        'Right': value['right'],
        'Top': value['top'],
        'TrackFrames': value['trackFrames'],
        'TrackID': value['trackID'],
        'TrackLost': value['trackLost'],
        'TrackStatus': value['trackStatus'],
        'Width': value['width'],
    };
}

